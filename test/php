<h1><?= $title; ?></h1>
<div>
<?php

$test = <<<TEST
  <div></div>
TEST;

/*! bug */
$test = [1, 2, 3, <<<TEST
  <div></div>
TEST
];

$test = [<<<TEST
  <div></div>
TEST, 1, 2, 3];

/*! bug */
test(1, 2, 3, <<<TEST
  <div></div>
TEST
);

test(<<<TEST
  <div></div>
TEST, 1, 2, 3);

$foo = ' $foo = "bar"; ' ;
$foo = '<?php echo $foo; ?>';

if ( $foo ) {
    $bar = 1;
} else if ( $bar < 4 ) {
    $bar = 0;
}

$foo = fn( $bar = 4 ) => {
    return 'true';
};

echo date('Y-m-d H:i:s', time( true ) );

?>
</div>

<!-- <?php echo date('Y-m-d H:i:s', time( true ) ); ?> -->

<?php

namespace x\minify;

use Test\Test\{
    Test,
    Test\Test,
    Test\Test as Test
};

function css(?string $in) {
    return \trim($in);
}

$var0 = [ 1 , 2 , 3 ] ; // comment
$var1 = [ 1 , 2 , 3 ];

$var0 = [ 1 , 2 , 3 ] ; # comment
$var1 = [ 1 , 2 , 3 ];

$var0 = [ 1 , 2 , 3 ] ; /* comment */
$var1 = [ 1 , 2 , 3 ];

#[Test(1, 2, 3)]
class Test {
    #[Test(1, 2, 3)]
    public $test;
    #[Test(1, 2, 3)]
    #[Test(1, 2, 3)]
    public function __construct(int $test) {
        $this->test = $test;
    }
}

// Remove trailing `,` in array
$foo = [
    1,
    2,
    3,
];

// Remove trailing `,` in function call
echo bar(
    1,
    2,
    3,
);

// Remove trailing `,` in namespace group
use foo\bar\{
    test\foo,
    test\bar,
    test\baz,
};

// Test named argument(s)
baz(qux: 5);

// Do not collapse `function` to `_` so that they become `function_`
function _() {
    // Test!
}

// Do not collapse `const` to `_` so that they become `const_`
const _ = 1;

?>

<?php       !session_id() && session_start(); ?>
<?php       /* comment */   ?>
<?php       (function () {})(); ?>